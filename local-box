#!/usr/bin/env bash

# version 2.1
# changelog
# version: 2.1
#   - date: 2020-04-15
#   - compatibility for dev user
# version: 2.0
#   - date: 2020-04-14
#   - replace all SSL with mkcert
#   - compatibility with MySQL 8.0
# version: 1.0
#   - extend_ssl added.
#   - date: 2020-04-16

# some strict rules for better coding practices!
set -o errexit -o pipefail -o noclobber -o nounset
# set -x

# to be run as a normal user with password-less sudo privileges

# create SSL
# create MySQL DB, User, Pass
# create Nginx config
# download WP and create wp-config.php
# add cron entry to trigger WP cron (hourly)

! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo "I’m sorry, `getopt --test` failed in this environment."
    echo "If you are on a mac, you may use `port install getopt` to get the latest version of getopt that supports long arguments!"
    exit 1
fi

OPTIONS=hdrpse
LONGOPTS=help,delete,reset,php,static,extend

# -use ! and PIPESTATUS to get exit code with errexit set
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

help() {
    echo "
    Usage $0 [options] example.com

    Options:
    -h, --help          Print this help
    -d, --delete        Delete everything related to the domain
    -r, --reset         Reset WordPress database
    -p, --php           Create PHP website
    -s, --static        Create Static website
    -e, --extend        Extend SSL certificate expiry
    "

    exit 4;
}

new_wp_site=y delete_site=n reset_site=n php_site=n static_site=n
# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -h|--help)
            help
            shift
            ;;
        -d|--delete)
            new_wp_site=n
            delete_site=y
            shift
            ;;
        -p|--php)
            new_wp_site=n
            php_site=y
            shift
            ;;
        -r|--reset)
            new_wp_site=n
            reset_site=y
            shift
            ;;
        -s|--static)
            new_wp_site=n
            static_site=y
            shift
            ;;
        -e|--extend)
            new_wp_site=n
            static_site=n
            extend_ssl=y
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

# if number of arguments equals to zero
if [ "$#" -ne 1 ] ; then
    help
fi

domain=$1

tld=$(echo $domain | awk -F '.' '{print $1}')
db_name=${tld}_db
db_user=${tld}_user
db_pass=$(/usr/bin/pwgen -cnsv 20 1)
db_prefix=$(/usr/bin/pwgen -A 2 1)

[ -f ~/.envrc  ] && source ~/.envrc

# https://developer.wordpress.org/reference/functions/wp_timezone_string/
# https://www.php.net/manual/en/timezones.php
timezone_string=${TIMEZONE_STRING_OR_OFFSET:-""}

wp_user_name=${WP_USERNAME:-""}
wp_user_pass=${WP_PASSWORD:-""}

function bootstrap_env {
    user=
    home_dir=

    [ -z "$user" ] && user=$USER
    [ -z "$home_dir" ] && home_dir=$HOME

    # setup WordPress user name
    [ -z "$wp_user_name" ] && {
        wp_user_name="${user}_$(/usr/bin/pwgen -cns 4 1)"
        echo "export WP_USERNAME=${wp_user_name}" >> ~/.envrc
    }

    # setup WordPress user password
    [ -z "$wp_user_pass" ] && {
        wp_user_pass="$(/usr/bin/pwgen -cnsv 24 1)"
        echo "export WP_PASSWORD=\"${wp_user_pass}\"" >> ~/.envrc
    }

    # echo $wp_user_name
    # echo $wp_user_pass

    # initialize site_path that is based on home_dir value
    site_path=$home_dir/sites/${domain}/public
    [ ! -d $site_path ] && mkdir -p ${site_path}
    parent_site_path=$home_dir/sites/${domain}

    wp_config_file=

    [ -f ${site_path}/wp-config.php ] && wp_config_file=${site_path}/wp-config.php
    [ -f ${parent_site_path}/wp-config.php ] && wp_config_file=${parent_site_path}/wp-config.php

    # get the DB password and prefix, if wp-config.php already exists.
    if [ ! -z ${wp_config_file} ] ; then
        db_pass=`$(which sed) "s/[()',;]/ /g" ${wp_config_file} | $(which grep) DB_PASSWORD | $(which awk) '{print $3}'`
        db_prefix=`$(which sed) "s/[()',;]/ /g" ${wp_config_file} | $(which grep) '^\$table_prefix' | $(which awk) '{print $3}'`
    fi

    echo; echo Env bootstrap done!; echo
}

function create_mysql {
    sudo mysql -e "CREATE DATABASE IF NOT EXISTS \`$db_name\`"
    sudo mysql -e "CREATE USER \`${db_user}\`@localhost identified by '${db_pass}'"
    sudo mysql -e "GRANT ALL PRIVILEGES ON \`${db_name}\`.* TO \`${db_user}\`@localhost"
    sudo mysql -e "FLUSH PRIVILEGES"
    echo 'DB created!'; echo
}

function add_cron {
    # requires $domain

    # trigger WP Cron via server cron
    if ! $(crontab -l | grep -qw $domain) ; then
        ( crontab -l; echo "@hourly curl --silent -L http://$domain/wp-cron.php &> /dev/null" ) | crontab -
        ( crontab -l; echo "@hourly /usr/local/bin/wp --path=~/sites/$domain/public cron event run --due-now &> /dev/null" ) | crontab -
    fi
}

function install_wp {
    [ ! -d ${site_path} ] && mkdir -p $site_path

    # ideally should be done as normal user
    cd $site_path

    # download WP core
    wp core download || { echo "Warning: WP core already seem exists! In order to force download again using the flag --force"; }

    # create wp-config.php file
    [ -z ${wp_config_file} ] && wp config create --dbname="$db_name" --dbuser="$db_user" --dbpass="$db_pass" --dbprefix="${db_prefix}_"
    mv wp-config.php ${parent_site_path}/
    wp_config_file=${parent_site_path}/wp-config.php

    # install WP
    wp core install --url="https://${domain}" --title=$domain --admin_user=$wp_user_name --admin_email="${user}@${domain}" --admin_password="${wp_user_pass}" --skip-email

    # download a default favicon
    [ ! -f favicon.ico ] && wget -q https://wordpress.org/favicon.ico
    # chown -R $user:$user $home_dir/sites/${domain}

    # minor tweaks
    wp rewrite structure '/%postname%/'
    [ ! -z "$timezone_string" ] && wp option update timezone_string $timezone_string

    # install plugin to auto-update everything (WP core, plugins and themes)
    mu_plugins_path="${site_path}/wp-content/mu-plugins"
    [ ! -d "${mu_plugins_path}" ] && mkdir ${mu_plugins_path}
    wget -q -O ${mu_plugins_path}/auto-update-everything.php https://raw.githubusercontent.com/pothi/wordpress-mu-plugins/master/auto-update-everything.php

    # remove welcome screen
    wp user meta update $wp_user_name show_welcome_panel 0

    add_cron
    echo 'WP downloaded and configured!'; echo
}

create_php() {
    [ ! -d ${site_path} ] && mkdir -p $site_path
    conf_file=${parent_site_path}/db.conf
    [ ! -f $conf_file ] && {
        touch $conf_file
        echo "export db_name=$db_name" >> ${parent_site_path}/db.conf
        echo "export db_user=$db_user" >> ${parent_site_path}/db.conf
        echo "export db_pass=$db_pass" >> ${parent_site_path}/db.conf
    }

    echo "PHP site created. Find the DB credentials at $conf_file."
}

create_static() {
    [ ! -d ${site_path} ] && mkdir -p $site_path

    if [ ! -f /etc/nginx/sites-enabled/${domain}.conf ] ; then
        cd /etc/nginx/sites-available/
        sudo cp static-site.conf ${domain}.conf
        sudo sed -i "s:/etc/letsencrypt/live/example.com/fullchain.pem:${fullchain_file}:" ${domain}.conf
        sudo sed -i "s:/etc/letsencrypt/live/example.com/privkey.pem:${privkey_file}:" ${domain}.conf
        sudo sed -i "s:example.com:${domain}:g"         ${domain}.conf
        sudo sed -i "s:/home/username:${home_dir}:"     ${domain}.conf
        sudo sed -i "s:/home/username:${home_dir}:g"    ${domain}.conf
        cd /etc/nginx/sites-enabled/
        sudo ln -s ../sites-available/${domain}.conf .
        sudo nginx -t && sudo systemctl restart nginx

        echo "Nginx vhost entry added for '$domain'."; echo
    else
        echo 'Nginx entry already exists!'
    fi

    echo 'Static site created!'
}

function create_nginx {
    if [ -f /etc/nginx/sites-enabled/${domain}.conf ] ; then
        echo 'Nginx entry already exists!'
        return
    fi

    cd /etc/nginx/sites-available/
    sudo cp ssl-example.com.conf ${domain}.conf
    sudo sed -i "s:example.com:${domain}:g"         ${domain}.conf
    sudo sed -i "s:/home/username:${home_dir}:"     ${domain}.conf
    sudo sed -i "s:/home/username:${home_dir}:g"    ${domain}.conf
    sudo sed -i "/ssl_certificate/d" ${domain}.conf
    cd /etc/nginx/sites-enabled/
    sudo ln -s ../sites-available/${domain}.conf .
    sudo nginx -t && sudo systemctl restart nginx

    echo "Nginx vhost entry added for '$domain'."; echo
}

function reset_wp {
    # required variables: $site_path, $domain, $wp_user_name, $wp_user_pass
    cd $site_path
    if [ ! -z $wp_config_file ] ; then
        wp db reset --yes
        wp core install --url="https://${domain}" --title=$domain --admin_user=$wp_user_name --admin_email="${user}@${domain}" --admin_password="${wp_user_pass}" --skip-email
        wp rewrite structure '/%postname%/'
        [ ! -z "$timezone_string" ] && wp option update timezone_string $timezone_string
    else
        echo 'WordPress not found. We can only reset WordPress sites. Did you mean to delete the site?'
    fi
}

function remove_nginx {
    [ -f /etc/nginx/sites-enabled/${domain}.conf ]      && sudo rm /etc/nginx/sites-enabled/${domain}.conf
    [ -f /etc/nginx/sites-available/${domain}.conf ]    && sudo rm /etc/nginx/sites-available/${domain}.conf
    sudo nginx -t && sudo systemctl restart nginx

    echo "Nginx vhost entry removed for '$domain'."; echo
}

function remove_mysql {
    sudo mysql -e "DROP DATABASE IF EXISTS $db_name"
    sudo mysql -e "DROP USER IF EXISTS ${db_user}@localhost"
    echo "MySQL database and user are removed for $domain."
}

function remove_wp {
    [ -d ${parent_site_path} ] && rm -rf ${parent_site_path}
    echo "WP files are removed for $domain."
}

function remove_cron {
    if $(crontab -l | grep -qw $domain) ; then
        crontab -l | grep -v $domain | crontab -
    fi
    echo "Cron entry is removed for $domain."
}

# local-box -r example.com
# local-box --reset example.com
# ask for your confirmation (whenever you wish to reset or remove/delete)
#reset_wp

# local-box -b
# local-box --bootstrap
# download and run local-bootstrap.sh file from local-box repo
# bootstrap_env

# local-box example.com
# this should bootstrap the server as well.
# display a message, if the server is not bootstrapped and it'd take sometime to complete it for the first domain!
# create_mysql
# create_nginx
# install_wp

# local-box -p example.com
# to install php app
# bootstrap_env
#create_nginx

# local-box -d example.com
# local-box --delete example.com
# to remove WP site
# in the following, the order doesn't matter
# remove_nginx
# remove_mysql
# remove_wp
# remove_cron

bootstrap_env

if [ "$new_wp_site" == "y" ] ; then
    # set -x
    create_mysql
    create_nginx
    install_wp
fi

if [ "$delete_site" == "y" ] ; then
    remove_nginx
    remove_mysql
    remove_wp
    remove_cron
fi

if [ "$php_site" == "y" ] ; then
    create_mysql
    create_nginx
    create_php
fi

if [ "$reset_site" == "y" ] ; then
    reset_wp
fi

if [ "$static_site" == "y" ] ; then
    create_static
fi


